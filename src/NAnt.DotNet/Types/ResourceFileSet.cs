// NAnt - A .NET build tool
// Copyright (C) 2001-2002 Gerry Shaw
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// Gerry Shaw (gerry_shaw@yahoo.com)
// Ian MacLean ( ian_maclean@another.com )

using System.IO;

using SourceForge.NAnt;
using SourceForge.NAnt.Attributes;

namespace SourceForge.NAnt.Tasks {
    /// <summary>
    /// Specialized <see cref="FileSet" /> class for managing resource files. 
    /// </summary>
    public class ResourceFileSet : FileSet {
        #region Public Instance Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceFileSet" /> class.
        /// </summary>
        public ResourceFileSet() : base() {
        }

        #endregion Public Instance Constructors

        #region Public Instance Properties
        
        /// <summary>
        /// Indicates the prefix to prepend to the actual resource.  
        /// This is usually the default namspace of the assembly.
        /// </summary>
        [TaskAttribute("prefix")]
        public string Prefix {
            get { return _prefix; }
            set { _prefix = value; } 
        }
            
        /// <summary>
        /// Indicates that prefixes should be dynamically generated by taking 
        /// the path of the resource relative to the basedir and appending it 
        /// to the specified prefix.
        /// </summary>
        [BooleanValidator()]
        [TaskAttribute("dynamicprefix")]
        public bool DynamicPrefix { 
            get { return _dynamicprefix; } 
            set { _dynamicprefix = value; }
        }
 
        /// <summary>
        /// Gets a <see cref="FileSet" /> containing all matching resx files.
        /// </summary>
        /// <value>
        /// A <see cref="FileSet" /> containing all matching resx files.
        /// </value>
        public FileSet ResxFiles {
            get {
                FileSet retFileSet = new FileSet(this);
                retFileSet.Includes.Clear();
                foreach (string file in FileNames){
                    if (Path.GetExtension(file) == ".resx" ) {
                        retFileSet.Includes.Add(file);
                    }                
                }   
                retFileSet.Scan();
                return retFileSet;
            }
        }

        /// <summary>
        /// Gets a <see cref="FileSet" /> containing all matching non-resx 
        /// files.
        /// </summary>
        /// <value>
        /// A <see cref="FileSet" /> containing all matching non-resx files.
        /// </value>
        public FileSet NonResxFiles {
            get {
                FileSet retFileSet = new FileSet(this);
                retFileSet.Includes.Clear();          
                foreach (string file in FileNames) {
                    if (Path.GetExtension(file) != ".resx" ) {
                        retFileSet.Includes.Add(file);
                    }                
                }   
                retFileSet.Scan();
                return retFileSet;
            }
        }

        #endregion Public Instance Properties
        
        #region Public Instance Methods

        /// <summary>
        /// Gets the manifest resource name for the file according to the 
        /// attributes that resources was defined with.
        /// </summary>
        /// <param name="fileName">The full path and name of the file as returned from <see cref="FileSet.FileNames" />.</param>
        /// <returns>The manifest resource name to be sent to the compiler.</returns>
        public string GetManifestResourceName(string fileName) {
            string prefix = Prefix;

            if (DynamicPrefix) {
                string filePathRelativeToBaseDir = Path.GetDirectoryName(fileName).Substring(this.BaseDirectory.Length+1);
                string relativePrefix = filePathRelativeToBaseDir.Replace(Path.DirectorySeparatorChar, '.').Replace(Path.AltDirectorySeparatorChar, '.');
                if(prefix.Length > 0) {
                    prefix = prefix + ".";
                }
                prefix = prefix + relativePrefix;
            }
            if (prefix.Length > 0 && !prefix.EndsWith(".")) {
               prefix = prefix + ".";
            }
            string actualFileName = Path.GetFileNameWithoutExtension(fileName);
            return Path.GetFileName(fileName).Replace(actualFileName, prefix + actualFileName);
        }

        #endregion Public Instance Methods

        #region Private Instance Fields

        string _prefix = ""; //Default to empty prefix
        bool _dynamicprefix = false;

        #endregion Private Instance Fields
    }
 }
 