<?xml version="1.0"?>
<project name="nant" default="build-release">
    <property name="sf.net.ssh.server" value="shell1.sf.net" />
    <property name="sf.net.web.path" value="/home/groups/n/na/nant/htdocs" />
    <!-- retrieve system information and environment variables -->
    <sysinfo />
    <!-- setup property that holds partial path to be used by scp -->
    <property name="serverpart" value="${sys.env.USERNAME}@${sf.net.ssh.server}:${sf.net.web.path}" />
    <!-- include master build file -->
    <include buildfile="nant.build" />
    <!-- perform a 'release' package and upload to sf.net -->
    <target name="build-release" depends="deploy-sf, install" description="Perform a 'release' package, uploads to sf.net and installs it" />
    <!-- deploy content to sourceforge -->
    <target name="deploy-sf" depends="deploy-distributions-sf, deploy-schema-sf, deploy-doc-sf, deploy-web-sf">
        <!-- remove existing symlink, if it exists -->
        <exec program="ssh" failonerror="false">
            <arg value="${sf.net.ssh.server}" />
            <arg value="rm --force ${sf.net.web.path}/release/latest" />
        </exec>
        <!-- finally, create symlink to the just uploaded nightly build -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="ln -s ${sf.net.web.path}/release/${project.version.full} ${sf.net.web.path}/release/latest" />
        </exec>
        <!-- make sure permissions are set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chmod -R 775 ${sf.net.web.path}/release/latest" />
        </exec>
        <!-- make sure group is set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chgrp -R nant ${sf.net.web.path}/release/latest" />
        </exec>
    </target>
    <!-- copy the release distributions, release notes and license to sourceforge -->
    <target name="deploy-distributions-sf" depends="set-net-1.0-framework-configuration, release, package">
        <!-- make sure the directory tree exists -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="mkdir --mode=775 --parents ${sf.net.web.path}/release/${project.version.full}" />
        </exec>
        <!-- copy the source zip distribution to sourceforge -->
        <exec workingdir="${path::get-directory-name(project.zip-path.src)}" program="scp">
            <arg value="${path::get-file-name(project.zip-path.src)}" />
            <arg value="${serverpart}/release/${project.version.full}/" />
        </exec>
        <!-- copy the source gzipped tar distribution to sourceforge -->
        <exec workingdir="${path::get-directory-name(project.gzip-path.src)}" program="scp">
            <arg value="${path::get-file-name(project.gzip-path.src)}" />
            <arg value="${serverpart}/release/${project.version.full}/" />
        </exec>
        <!-- copy the binary zip distribution to sourceforge -->
        <exec workingdir="${path::get-directory-name(project.zip-path.bin)}" program="scp">
            <arg value="${path::get-file-name(project.zip-path.bin)}" />
            <arg value="${serverpart}/release/${project.version.full}/" />
        </exec>
        <!-- copy the binary gzipped tar distribution to sourceforge -->
        <exec workingdir="${path::get-directory-name(project.gzip-path.bin)}" program="scp">
            <arg value="${path::get-file-name(project.gzip-path.bin)}" />
            <arg value="${serverpart}/release/${project.version.full}/" />
        </exec>
        <!-- copy the release notes and license to sourceforge -->
        <exec workingdir="${build.dir}/doc" program="scp">
            <arg value="-C" />
            <arg value="*.html" />
            <arg value="${serverpart}/release/${project.version.full}/" />
        </exec>
        <echo message="Copied distributions and release notes over to SF.Net" />
        <!-- make sure permissions are set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chmod -R 775 ${sf.net.web.path}/release/${project.version.full}" />
        </exec>
        <!-- make sure group is set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chgrp -R nant ${sf.net.web.path}/release/${project.version.full}" />
        </exec>
    </target>
    <!-- copy schema to sourceforge -->
    <target name="deploy-schema-sf" depends="set-net-1.0-framework-configuration, release, package">
        <!-- make sure the directory tree exists -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="mkdir --mode=775 --parents ${sf.net.web.path}/release/${project.version.full}" />
        </exec>
        <!-- copy schema file to sourceforge (using compression) -->
        <exec workingdir="${build.dir}/schema" program="scp">
            <arg value="-C" />
            <arg value="${project.name}.xsd" />
            <arg value="${serverpart}/release/${project.version.full}/${project.name}.xsd" />
        </exec>
        <echo message="Copied schema over to SF.Net" />
        <!-- make sure permissions are set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chmod 775 ${sf.net.web.path}/release/${project.version.full}/${project.name}.xsd" />
        </exec>
        <!-- make sure group is set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chgrp nant ${sf.net.web.path}/release/${project.version.full}/${project.name}.xsd" />
        </exec>
    </target>
    <!-- copy online docs (manual & sdk) to sourceforge -->
    <target name="deploy-doc-sf" depends="set-net-1.0-framework-configuration, release, package-doc">
        <!-- make sure the directory tree exists -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="mkdir --mode=775 --parents ${sf.net.web.path}/release/${project.version.full}" />
        </exec>
        <!-- copy the gzipped tar doc distribution to sourceforge -->
        <exec workingdir="${path::get-directory-name(project.gzip-path.doc)}" program="scp">
            <arg value="${path::get-file-name(project.gzip-path.doc)}" />
            <arg value="${serverpart}/release/${project.version.full}/doc.tar.gz" />
        </exec>
        <!-- extract the doc distribution on sourceforge -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="cd ${sf.net.web.path}/release/${project.version.full} &amp;&amp; tar -xzf doc.tar.gz &amp;&amp; rm --force doc.tar.gz" />
        </exec>
        <echo message="Copied online docs over to SF.Net" />
        <!-- make sure permissions are set right -->
        <exec program="ssh" failonerror="false">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chmod -R 775 ${sf.net.web.path}/release/${project.version.full}/help" />
        </exec>
        <exec program="ssh" failonerror="false">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chmod -R 775 ${sf.net.web.path}/release/${project.version.full}/sdk" />
        </exec>
        <!-- make sure group is set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chgrp -R nant ${sf.net.web.path}/release/${project.version.full}/help" />
        </exec>
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="chgrp -R nant ${sf.net.web.path}/release/${project.version.full}/sdk" />
        </exec>
    </target>
    <!-- copy website to sourceforge -->
    <target name="deploy-web-sf" depends="set-net-1.0-framework-configuration, release, package">
        <!-- make sure the directory tree exists -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="mkdir --mode=775 --parents ${sf.net.web.path}" />
        </exec>
        <!-- try to remove existing files -->
        <exec program="ssh" failonerror="false">
            <arg value="${sf.net.ssh.server}" />
            <arg value="find ${sf.net.web.path} -maxdepth 1 -type f -exec rm --force {} \;" />
        </exec>
        <!-- copy images and html files for website to sourceforge (using compression) -->
        <exec workingdir="${build.dir}/web" program="scp">
            <arg value="-C" />
            <arg value="*" />
            <arg value="${serverpart}" />
        </exec>
        <echo message="Copied website over to SF.Net" />
        <!-- make sure permissions are set right -->
        <exec program="ssh" failonerror="false">
            <arg value="${sf.net.ssh.server}" />
            <arg value="find ${sf.net.web.path} -maxdepth 1 -type f -exec chmod 775 {} \;" />
        </exec>
        <!-- make sure group is set right -->
        <exec program="ssh">
            <arg value="${sf.net.ssh.server}" />
            <arg value="find ${sf.net.web.path} -maxdepth 1 -type f -exec chgrp nant {} \;" />
        </exec>
    </target>
    
    <!-- Temporary directories for building the rpm...there might be a better way to do this. -->
    <property name="rpm.base" value="c:/temp/NAnt/rpm"/>
    <property name="rpm.working" value="c:/temp/NAnt/working"/>
    <property name="cygwin.rpm.base" value="/cygdrive/c/temp/NAnt/rpm"/>
    <property name="cygwin.rpm.working" value="/cygdrive/c/temp/NAnt/working"/>
    
    <target name="setup-rpm" description="Sets up the environment for building rpms.">
        <mkdir dir="${rpm.base}"/>
        <mkdir dir="${rpm.base}/BUILD"/>
        <mkdir dir="${rpm.base}/RPMS"/>
        <mkdir dir="${rpm.base}/i386"/>
        <mkdir dir="${rpm.base}/i686"/>
        <mkdir dir="${rpm.base}/noarch"/>
        <mkdir dir="${rpm.base}/SOURCES"/>
        <mkdir dir="${rpm.base}/SPECS"/>
        <mkdir dir="${rpm.base}/SRPMS"/>
        <mkdir dir="${rpm.base}/tmp"/>
        <mkdir dir="${rpm.base}/tmp/NAnt-src"/>
        <mkdir dir="${rpm.base}/tmp/NAnt-tar"/>
    </target>    

    <target name="prepare-rpm" depends="setup-rpm" description="Prepare the binaries for packaging.">
        <copy todir="${rpm.base}/tmp/NAnt-src">
            <fileset basedir="${build.dir}">
                <include name="bin/**"/>
                <!--include name="doc/**"/-->
                <!--include name="examples/**"/-->
            </fileset>
        </copy>    

        <exec program="bash">
            <arg line="-c -o onecmd"/>
            <arg value="'tar -cvzf ${cygwin.rpm.base}/tmp/NAnt-tar/NAnt.tar.gz ${cygwin.rpm.base}/tmp/NAnt-src bin'"/>
        </exec>
        
        <copy file="${rpm.base}/tmp/NAnt-tar/NAnt.tar.gz" tofile="${rpm.base}/SOURCES/NAnt.tar.gz" overwrite="true"/>
        <copy file="${build.dir}/NAnt.spec" tofile="${rpm.base}/SPECS/NAnt.spec" overwrite="true"/>
    </target>
    
    <target name="binary-rpm" description="Build the binary rpm for NAnt.">
        <property name="commandline" value="rpmbuild -ba --buildroot=${cygwin.rpm.base}/tmp ${cygwin.rpm.base}/SPECS/NAnt.spec"/>
        <echo file="${rpm.base}/build.bat">bash -c '${commandline}'</echo>

        <exec program="bash">
            <arg line="-c -o onecmd '${commandline}'"/>
        </exec>

        <copy todir="${build.dir}" flatten="true">
            <fileset basedir="${rpm.base}/RPMS">
                <include name="**/*.rpm"/>
            </fileset>   
        </copy>
    </target>
</project>
